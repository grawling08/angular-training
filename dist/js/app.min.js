(function(){
    'use strict';
    angular.module('starter',[
        'ui.router',
        'restangular',
        'ui.bootstrap',
        'toastr',
        'LocalStorageModule',
        'ngDialog',
        'ui.bootstrap.datetimepicker',
        'angular-loading-bar',
        'cfp.loadingBar'
    ]);
})();
(function(){
    'use strict';

    angular.module('starter')
        .config(configuration);
    
    configuration.$inject = ['$stateProvider','$urlRouterProvider','RestangularProvider','API_URL','API_VERSION','$httpProvider','cfpLoadingBarProvider'];
    
    function configuration($stateProvider, $urlRouterProvider, RestangularProvider,API_URL,API_VERSION,$httpProvider,cfpLoadingBarProvider){
        
        RestangularProvider.setBaseUrl(API_URL + API_VERSION);
        $httpProvider.interceptors.push('httpInterceptor');
        //cfpLoadingBarProvider.includeSpinner = false;
        
        $urlRouterProvider.otherwise('/login');
        $stateProvider
            .state('main',{
                url: '/main',
                abstract: true,
                templateUrl:'./modules/main.html'
            })
            .state('main.home',{
                url: '/home',
                templateUrl:'./modules/home.html'
            });
    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .run(appRun);

    appRun.$inject = ['$rootScope','loginFactory','localStorageService','$location','cfpLoadingBar'];

    function appRun($rootScope,loginFactory,localStorageService,$location,cfpLoadingBar){

        if(loginFactory.getCurrentUser()){
            $rootScope.currentUser = loginFactory.getCurrentUser();
        } else {
            $location.path('/login');
        }

        $rootScope.logout = function(){
            loginFactory.logout().then(function(data){
                if(data.response.success){
                    localStorageService.remove('user');
                    localStorageService.remove('user.token');

                    $location.path('/login');
                }
            });
        }

        $rootScope.$on('unauthorized', function(){
            localStorageService.remove('user');
            localStorageService.remove('user.token');
            console.log('unauthorized');
            $location.path('/login');
        });

        $rootScope.$on('loading:start',function(){
            console.log('start loading');
            cfpLoadingBar.start();
        });

        $rootScope.$on('loading:stop',function(){
            console.log('stop loading');
            cfpLoadingBar.complete();
        });
    }

})();
(function(){
    'use strict';

    angular.module('starter')
        .constant('API_URL','http://localhost:3000')
        .constant('API_VERSION', '/api/v1');
})();
(function(){
    'use strict';

    angular.module('starter')
        .factory('httpInterceptor',httpInterceptor);

        httpInterceptor.$inject = ['$rootScope','localStorageService','$q','$location'];

        function httpInterceptor($rootScope,localStorageService,$q,$location){
            return {
                request: function(config){
                    config.headers = config.headers || {};
                    if(localStorageService.get('user.token')){
                        var token = localStorageService.get('user.token');
                        config.headers.Authorization = 'Bearer ' + token;
                    }
                    $rootScope.$broadcast('loading:start');
                    return config || $q.when(config);
                },
                response: function(response){
                    $rootScope.$broadcast('loading:stop');
                    return response || $q.when(response);
                },
                responseError: function(response){
                    if(response.status == 401){
                        $rootScope.$broadcast('unauthorized');
                        $location.path('/login');
                    } else if(response.status == 403){
                        $rootScope.$broadcast('unauthorized');
                        $location.path('/login');
                    }

                    return $q.reject(response);
                }
            }
        }
})()
(function(){
    'use strict';

    angular.module('starter')
        .directive('scrollable',scrollable);
    
    scrollable.$inject = ['$document', '$interval', '$timeout', '$window'];
    
    function scrollable($document, $interval, $timeout, $window){
        
        return {
            restrict: 'A',
            link: function($scope, wrappedElement, attributes) {
                var element = wrappedElement[0],
                    navTabsElement,
                    scrollTimer,
                    dragInfo = {};
    
                init();
    
                function startScroll($event) {
                    if ($event.target == element) {
                        // TODO should use requestAnimationFrame
                        scrollTimer = $interval(function() {
                            navTabsElement.scrollLeft += ($event.clientX > 200) ? 5 : -5;
                        }, 1000 / 60);
                    }
                };
    
                function stopScroll($event) {
                    $interval.cancel(scrollTimer);
                }
    
                function onDocumentMouseMove($event) {
                    var differenceX = $event.pageX - dragInfo.lastPageX;
    
                    dragInfo.lastPageX = $event.pageX;
                    dragInfo.moved = true;
    
                    navTabsElement.scrollLeft -= differenceX;
                }
    
                function onDocumentMouseUp($event) {
                    //$event.preventDefault();
                    //$event.stopPropagation();
                    //$event.cancelBubble = true;
    
                    $document.off('mousemove', onDocumentMouseMove);
                    $document.off('mouseup', onDocumentMouseUp);
    
                    // wow
                    if (dragInfo.moved === true) {
                        [].forEach.call(navTabsElement.querySelectorAll('li a'), function(anchor) {
                            var anchorScope = angular.element(anchor).scope();
                            anchorScope.oldDisabled = anchorScope.disabled;
                            anchorScope.disabled = true;
                        });
                        $timeout(function() {
                            [].forEach.call(navTabsElement.querySelectorAll('li a'), function(anchor) {
                                var anchorScope = angular.element(anchor).scope();
                                anchorScope.disabled = anchorScope.oldDisabled;
                                delete anchorScope.oldDisabled;
                            });
                        });
                    }
                }
    
                function onNavTabsMouseDown($event) {
                    var currentlyScrollable = element.classList.contains('scrollable');
    
                    if (currentlyScrollable === true) {
                        $event.preventDefault();
    
                        dragInfo.lastPageX = $event.pageX;
                        dragInfo.moved = false;
    
                        $document.on('mousemove', onDocumentMouseMove);
                        $document.on('mouseup', onDocumentMouseUp);
                    }
                }
    
                function onWindowResize() {
                    checkForScroll();
                }
                
                function checkForScroll(){
                    //console.log('checking tabs for scroll');
                    var currentlyScrollable = element.classList.contains('scrollable'),
                        difference = 1;
    
                    // determine whether or not it should actually be scrollable
                    // the logic is different if the tabs are currently tagged as scrollable
                    if (currentlyScrollable === true) {
                        difference = navTabsElement.scrollWidth - navTabsElement.clientWidth;
                    } else {
                        difference = navTabsElement.clientHeight - navTabsElement.querySelector('.nav-tabs > li').clientHeight;
                    }
                    //console.log(difference);
    
                    if (difference > 2) {
                        element.classList.add('scrollable');
                    } else {
                        element.classList.remove('scrollable');
                    }
                }
    
                function bindEventListeners() {
                    wrappedElement.on('mousedown', function($event) {
                        startScroll($event);
                    });
                    
                    wrappedElement.on('click', function($event) {
                        //console.log('CLICK', $event.defaultPrevented);
                    });
    
                    wrappedElement.on('mouseup mouseleave', function($event) {
                        stopScroll($event);
                    });
    
                    angular.element(navTabsElement).on('mousedown', onNavTabsMouseDown);
    
                    $window.addEventListener('resize', onWindowResize);
    
                    $scope.$on('$destroy', function() {
                        wrappedElement.off('mousedown mouseup mouseleave');
                        angular.element(navTabsElement).off('mousedown', onNavTabsMouseDown);
                        $window.removeEventListener('resize', onWindowResize);
                    });
                }
    
                $scope.$on('checkTabs', function(){ $timeout(checkForScroll, 10); });
    
                function init() {
                    // wait for tabs, sucks
                    $timeout(function() {
                        navTabsElement = element.querySelector('.nav-tabs');
    
                        bindEventListeners();
                        onWindowResize();
                    });
                }
            }
        }
    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .config(usersConfig);

        usersConfig.$inject = ['$stateProvider'];

        function usersConfig($stateProvider){
            $stateProvider
                .state('main.users', {
                    url: '/users',
                    templateUrl: './modules/users/users.html',
                    controller: 'usersController'
                });
        }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('usersController', usersController);

    usersController.$inject = ['$scope', 'usersFactory', '$filter', '$uibModal','ngDialog','toastr'];

    function usersController($scope, usersFactory, $filter, $uibModal, ngDialog, toastr) {
        $scope.users = [];
        $scope.usersCopy = [];
        $scope.txtSearch = '';

        usersFactory.getAllUser().then(function (data) {
            //console.log("data:" + data);
            if (data.statusCode == 200 && data.response.success) {
                var users = data.response.result;
                console.log('users: ' + users);
                if (!_.isEmpty(users)) {
                    $scope.users = users;
                    $scope.usersCopy = angular.copy(users);
                }
            }
        });

        $scope.search = function () {
            if ($scope.txtSearch) {
                var result = $filter('filter')($scope.users, $scope.txtSearch);
                if (result) {
                    $scope.users = result;
                }
            } else {
                $scope.users = $scope.usersCopy;
            }
        }

        $scope.refresh = function () {
            usersFactory.getAllUser().then(function (data) {
                console.log("data:" + data);
                if (data.statusCode == 200 && data.response.success) {
                    var users = data.response.result;
                    console.log('users: ' + users);
                    if (!_.isEmpty(users)) {
                        $scope.users = users;
                        $scope.usersCopy = angular.copy(users);
                    }
                }
            });
        }

        $scope.newEntry = function () {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/users/user.modal.html',
                size: 'md',
                controller: 'userModalCtrl',
                resolve: {
                    user_id: function(){
                        return null;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refresh();
                }
            }, function () { });
        }

        $scope.updateEntry = function (_id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/users/user.modal.html',
                size: 'md',
                controller: 'userModalCtrl',
                resolve: {
                    user_id: function(){
                        return _id;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refresh();
                }
            }, function () { });
        }

        $scope.deleteData = function(row){
            $scope.modal = {
                title:'users',
                message:'Delete this Data?'
            };
            ngDialog.openConfirm({
                templateUrl: './modules/dialogs/custom.dialog.html',
                scope: $scope,
                className: 'ngdialog-theme-default'
            }).then(function(){
                usersFactory.deleteUser(row._id).then(function(data){
                    if(data.statusCode == 200 && data.response.success){
                        toastr.success(data.response.msg, 'SUCCESS');
                        $scope.refresh();
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('userModalCtrl', userModalCtrl);

    userModalCtrl.$inject = ['$scope', '$uibModalInstance', 'usersFactory', 'user_id', 'toastr', '$timeout'];

    function userModalCtrl($scope, $uibModalInstance, usersFactory, user_id, toastr, $timeout) {
        $scope.user = {};

        if (!_.isEmpty(user_id)) {
            usersFactory.getUser(user_id).then(function (data) {
                if (data.statusCode == 200 && data.response.success) {
                    var user = data.response.result;
                    if (user) {
                        $scope.user = user;
                    }
                } else {
                    toastr.error(data.response.msg, 'ERROR');
                    return;
                }
            });
        }

        $scope.saveEntry = function () {
            if (_.isEmpty(user_id)) {
                usersFactory.saveUser($scope.user).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            } else {
                usersFactory.updateUser(user_id, $scope.user).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            }

        }

        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        }


    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .factory('usersFactory',usersFactory);

        usersFactory.$inject = ['Restangular'];

        function usersFactory(Restangular){
            return {
                getAllUser: function(){
                    return Restangular.all('users').customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                saveUser: function(data){
                    return Restangular.all('users').customPOST(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                deleteUser: function(user_id){
                    return Restangular.all('users/' + user_id).customDELETE().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                updateUser: function(user_id,data){
                    return Restangular.all('users/' + user_id).customPUT(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getUser: function(user_id){
                    return Restangular.all('users/' + user_id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                }
            }
        }
})();
(function(){
    'use strict';

    angular.module('starter')
        .config(vehiclesConfig);

        vehiclesConfig.$inject = ['$stateProvider'];

        function vehiclesConfig($stateProvider){
            $stateProvider
                .state('main.vehicles', {
                    url: '/vehicles',
                    templateUrl: './modules/vehicles/vehicles.html',
                    controller: 'vehiclesController'
                })
                .state('main.vehicle', {
                    url: '/vehicles?{_id}',
                    templateUrl: './modules/vehicles/vehicle.details.html',
                    controller: 'vehicleModalCtrl',
                    resolve: {
                        v_id: function($transition$) {
                          return $transition$.params()._id;
                        }
                    }
                });
        }
})();


(function () {
    'use strict';

    angular.module('starter')
        .controller('vehiclesController', vehiclesController);

    vehiclesController.$inject = ['$scope', 'vehiclesFactory', '$filter', '$uibModal','ngDialog','toastr'];

    function vehiclesController($scope, vehiclesFactory, $filter, $uibModal, ngDialog, toastr) {
        $scope.vehicles = [];
        $scope.vehiclesCopy = [];
        $scope.txtSearch = '';

        vehiclesFactory.getAllVehicles().then(function (data) {
            //console.log("data:" + data);
            if (data.statusCode == 200 && data.response.success) {
                var vehicles = data.response.result;
                //console.log('vehicles: ' + vehicles);
                if (!_.isEmpty(vehicles)) {
                    $scope.vehicles = vehicles;
                    $scope.vehiclesCopy = angular.copy(vehicles);
                }
            }
        });

        $scope.searchV = function () {
            if ($scope.txtSearch) {
                $scope.vehicles = $scope.vehiclesCopy;
                var result = $filter('filter')($scope.vehicles, $scope.txtSearch);
                if (result) {
                    $scope.vehicles = result;
                } else {
                    $scope.vehicles = $scope.txtSearch + " is not found!";
                }
            } else {
                $scope.vehicles = $scope.vehiclesCopy;
            }
        }

        $scope.refreshV = function () {
            vehiclesFactory.getAllVehicles().then(function (data) {
                //console.log("data:" + data);
                if (data.statusCode == 200 && data.response.success) {
                    var vehicles = data.response.result;
                    console.log('vehicles: ' + vehicles);
                    if (!_.isEmpty(vehicles)) {
                        $scope.vehicles = vehicles;
                        $scope.vehiclesCopy = angular.copy(vehicles);
                    }
                }
            });
        }

        $scope.deleteDataV = function(row){
            $scope.modal = {
                title:'vehicles',
                message:'Delete this Data?'
            };
            ngDialog.openConfirm({
                templateUrl: './modules/dialogs/custom.dialog.html',
                scope: $scope,
                className: 'ngdialog-theme-default'
            }).then(function(){
                vehiclesFactory.deleteVehicle(row._id).then(function(data){
                    if(data.statusCode == 200 && data.response.success){
                        toastr.success(data.response.msg, 'SUCCESS');
                        $scope.refreshV();
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            });
        }
    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .factory('vehiclesFactory', vehiclesFactory);

        vehiclesFactory.$inject = ['Restangular'];

        function vehiclesFactory(Restangular){
            return {
                getAllVehicles: function(){
                    return Restangular.all('vehicles').customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                saveVehicle: function(data){
                    return Restangular.all('vehicles').customPOST(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                deleteVehicle: function(id){
                    return Restangular.all('vehicles/' + id).customDELETE().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                updateVehicle: function(id,data){
                    return Restangular.all('vehicles/' + id).customPUT(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getVehicle: function(id){
                    return Restangular.all('vehicles/' + id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                }
            }
        }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('vehicleModalCtrl', vehicleModalCtrl);

    vehicleModalCtrl.$inject = ['$scope', 'vehiclesFactory', 'toastr', '$timeout', '$filter','v_id','$state'];

    function vehicleModalCtrl($scope, vehiclesFactory, toastr, $timeout, $filter, v_id, $state) {
        $scope.vehicle = {};

        if (!_.isEmpty(v_id)) {
            vehiclesFactory.getVehicle(v_id).then(function (data) {
                if (data.statusCode == 200 && data.response.success) {
                    var vehicle = data.response.result;
                    if (vehicle) {
                        $scope.vehicle = vehicle;
                        //console.log(new Date($scope.vehicle.datepurchased));
                        $scope.vehicle.datepurchased = new Date($scope.vehicle.datepurchased);
                    }
                } else {
                    toastr.error(data.response.msg, 'ERROR');
                    return;
                }
            });
        }

        $scope.checkToggle = function(){
            if (!_.isEmpty(v_id)) {
                return false;
            } else {
                return true;
            }
        };

        $scope.saveEntryV = function () {
            if (_.isEmpty(v_id)) {
                $scope.vehicle.datepurchased = $filter('date')($scope.vehicle.datepurchased, "yyyy-MM-dd");
                //console.log($scope.vehicle);
                vehiclesFactory.saveVehicle($scope.vehicle).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        //console.log(data.response);
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            //$uibModalInstance.close('save');
                            $state.go('main.vehicles');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            } else {
                $scope.vehicle.datepurchased = $filter('date')($scope.vehicle.datepurchased, "yyyy-MM-dd");
                vehiclesFactory.updateVehicle(v_id, $scope.vehicle).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            //$uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            }
        }
    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .config(travelsConfig);

        travelsConfig.$inject = ['$stateProvider'];

        function travelsConfig($stateProvider){
            $stateProvider
                .state('main.travels', {
                    url: '/travels',
                    templateUrl: './modules/travels/travels.html',
                    controller: 'travelsController'
                });
                // .state('main.vehicle', {
                //     url: '/vehicles?{_id}',
                //     templateUrl: './modules/vehicles/vehicle.details.html',
                //     controller: 'vehicleModalCtrl',
                //     resolve: {
                //         v_id: function($transition$) {
                //           return $transition$.params()._id;
                //         }
                //     }
                // });
        }
})();


(function () {
    'use strict';

    angular.module('starter')
        .controller('travelsController', travelsController);

        travelsController.$inject = ['$scope', 'travelsFactory', '$filter', '$uibModal','ngDialog','toastr'];

    function travelsController($scope, travelsFactory, $filter, $uibModal, ngDialog, toastr) {
        $scope.travels = [];
        $scope.travelsCopy = [];
        $scope.txtSearch = '';

        travelsFactory.getAllTravels().then(function (data) {
            //console.log("data:" + data);
            if (data.statusCode == 200 && data.response.success) {
                var travels = data.response.result;
                //console.log('travels: ' + travels);
                if (!_.isEmpty(travels)) {
                    $scope.travels = travels;
                    $scope.travelsCopy = angular.copy(travels);
                }
            }
        });

        $scope.searchT = function () {
            if ($scope.txtSearch) {
                $scope.travels = $scope.travelsCopy;
                var result = $filter('filter')($scope.travels, $scope.txtSearch);
                if (result) {
                    $scope.travels = result;
                } else {
                    $scope.travels = $scope.txtSearch + " is not found!";
                }
            } else {
                $scope.travels = $scope.travelsCopy;
            }
        }

        $scope.refreshT = function () {
            travelsFactory.getAllTravels().then(function (data) {
                //console.log("data:" + data);
                if (data.statusCode == 200 && data.response.success) {
                    var travels = data.response.result;
                    //console.log('travels: ' + travels);
                    if (!_.isEmpty(travels)) {
                        $scope.travels = travels;
                        $scope.travelsCopy = angular.copy(travels);
                    }
                }
            });
        }

        $scope.newEntry = function () {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/travels/travel.modal.html',
                size: 'md',
                controller: 'travelModalCtrl',
                resolve: {
                    travel_id: function(){
                        return null;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refreshT();
                }
            }, function () { });
        }

        $scope.updateEntry = function (_id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/travels/travel.modal.html',
                size: 'md',
                controller: 'travelModalCtrl',
                resolve: {
                    travel_id: function(){
                        return _id;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refreshT();
                }
            }, function () { });
        }

        $scope.deleteDataT = function(row){
            $scope.modal = {
                title:'travels',
                message:'Delete this Data?'
            };
            ngDialog.openConfirm({
                templateUrl: './modules/dialogs/custom.dialog.html',
                scope: $scope,
                className: 'ngdialog-theme-default'
            }).then(function(){
                travelsFactory.deleteTravel(row._id).then(function(data){
                    if(data.statusCode == 200 && data.response.success){
                        toastr.success(data.response.msg, 'SUCCESS');
                        $scope.refreshT();
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            });
        }
    }
})();
(function () {
	'use strict';

	angular.module('starter')
		.controller('travelModalCtrl', travelModalCtrl);

	travelModalCtrl.$inject = ['$scope', '$uibModalInstance', 'travelsFactory', 'vehiclesFactory', 'travel_id', 'toastr', '$timeout','$filter', '$state'];

	function travelModalCtrl($scope, $uibModalInstance, travelsFactory, vehiclesFactory, travel_id, toastr, $timeout, $filter, $state) {
		$scope.travel = {};
		$scope.vehicles = {};

		if (!_.isEmpty(travel_id)) {
			travelsFactory.getTravel(travel_id).then(function (data) {
				if (data.statusCode == 200 && data.response.success) {
					var travel = data.response.result;
					if (travel) {
						$scope.travel = travel;
						$scope.travel.departure = new Date($scope.travel.departure);
						$scope.travel.arrival = new Date($scope.travel.arrival);
					}
				} else {
					toastr.error(data.response.msg, 'ERROR');
					return;
				}
			});
		}

		vehiclesFactory.getAllVehicles().then(function (data){
			if (data.statusCode == 200 && data.response.success) {
				var vehicles = data.response.result;
				if (vehicles) {
					$scope.vehicles = vehicles;
				}
			} else {
				toastr.error(data.response.msg, 'ERROR');
				return;
			}
		});

		$scope.departure = {
			datepickerOptions: {
				showWeeks: false,
				startingDay: 1,
				dateDisabled: function(data) {
					return (data.mode === 'day' && (new Date().toDateString() == data.date.toDateString()));
				}
			}
		}
		$scope.arrival = {
			datepickerOptions: {
				showWeeks: false,
				startingDay: 1,
				dateDisabled: function(data) {
					return (data.mode === 'day' && (new Date().toDateString() == data.date.toDateString()));
				}
			}
		}
		$scope.isOpen = false;
		$scope.isOpen2 = false;
		$scope.openCalendar = function(e) {
			e.preventDefault();
			e.stopPropagation();
			$scope.isOpen = true;
		};
		$scope.openCalendar2 = function(e) {
			e.preventDefault();
			e.stopPropagation();
			$scope.isOpen2 = true;
		};

		$scope.saveEntry = function () {
			$scope.travel.departure = $filter('date')($scope.travel.departure, "yyyy-MM-dd HH:mm:ss");
			$scope.travel.arrival = $filter('date')($scope.travel.arrival, "yyyy-MM-dd HH:mm:ss");
			if (_.isEmpty(travel_id)) {
				travelsFactory.saveTravel($scope.travel).then(function (data) {
					if (data.statusCode == 200 && data.response.success) {
						toastr.success(data.response.msg, 'SUCCESS');
						$timeout(function(){
							//$uibModalInstance.close('save');
							$state.go('main.travels');
						},1000);
					} else if (!data.success && _.isArray(data.result)) {
						_.each(data.result, function (row) {
							toastr.warning(row.msg, 'WARNING');
						});
						return;
					} else {
						toastr.error(data.response.msg, 'ERROR');
						return;
					}
				})
			} else {
				travelsFactory.updateTravel(travel_id, $scope.travel).then(function (data) {
					if (data.statusCode == 200 && data.response.success) {
						toastr.success(data.response.msg, 'SUCCESS');
						$timeout(function(){
							$uibModalInstance.close('save');
							//$state.go('main.travels');
						},1000);
					} else if (!data.success && _.isArray(data.result)) {
						_.each(data.result, function (row) {
							toastr.warning(row.msg, 'WARNING');
						});
						return;
					} else {
						toastr.error(data.response.msg, 'ERROR');
						return;
					}
				})
			}

		}

		$scope.cancel = function () {
			$uibModalInstance.dismiss('cancel');
		}
	}
})();
(function(){
    'use strict';

    angular.module('starter')
        .factory('travelsFactory', travelsFactory);

        travelsFactory.$inject = ['Restangular'];

        function travelsFactory(Restangular){
            return {
                getAllTravels: function(){
                    return Restangular.all('travels').customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                saveTravel: function(data){
                    return Restangular.all('travels').customPOST(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                deleteTravel: function(id){
                    return Restangular.all('travels/' + id).customDELETE().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                updateTravel: function(id,data){
                    return Restangular.all('travels/' + id).customPUT(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getTravel: function(id){
                    return Restangular.all('travels/' + id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getTravelByVehicle: function(v_id){
                    return Restangular.all('travels/vehicle/' + v_id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                }
            }
        }
})();
(function(){
    'use strict';

    angular.module('starter')
        .config(repairsConfig);

        repairsConfig.$inject = ['$stateProvider'];

        function repairsConfig($stateProvider){
            $stateProvider
                .state('main.repairs', {
                    url: '/repairs',
                    templateUrl: './modules/repairs/repairs.html',
                    controller: 'repairsController'
                })
                .state('main.repair', {
                    url: '/repairs?{_id}',
                    templateUrl: './modules/repairs/repair.details.html',
                    controller: 'repairModalCtrl',
                    resolve: {
                        r_id: function($transition$) {
                          return $transition$.params()._id;
                        }
                    }
                });
        }
})();


(function () {
    'use strict';

    angular.module('starter')
        .controller('repairsController', repairsController);

        repairsController.$inject = ['$scope', 'repairsFactory', 'partsFactory', '$filter', '$uibModal','ngDialog','toastr'];

    function repairsController($scope, repairsFactory, partsFactory, $filter, $uibModal, ngDialog, toastr) {
        $scope.repairs = [];
        $scope.repairsCopy = [];
        $scope.txtSearch = '';
        $scope.parts = [];

        repairsFactory.getAllRepairParts().then(function (data) {
            if (data.statusCode == 200 && data.response.success) {
                var repairs = data.response.result;
                console.dir(repairs);
                if (!_.isEmpty(repairs)) {
                    $scope.repairs = repairs;
                    $scope.repairsCopy = angular.copy(repairs);
                }
            }
        });


        $scope.searchR = function () {
            if ($scope.txtSearch) {
                $scope.repairs = $scope.repairsCopy;
                var result = $filter('filter')($scope.repairs, $scope.txtSearch);
                if (result) {
                    $scope.repairs = result;
                } else {
                    $scope.repairs = $scope.txtSearch + " is not found!";
                }
            } else {
                $scope.repairs = $scope.repairsCopy;
            }
        }

        $scope.refreshR = function () {
            repairsFactory.getAllRepairParts().then(function (data) {
                if (data.statusCode == 200 && data.response.success) {
                    var repairs = data.response.result;
                    if (!_.isEmpty(repairs)) {
                        $scope.repairs = repairs;
                        $scope.repairsCopy = angular.copy(repairs);
                    }
                }
            });
        }

        $scope.newEntry = function () {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/repairs/repair.modal.html',
                size: 'md',
                controller: 'repairModalCtrl',
                resolve: {
                    r_id: function(){
                        return null;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refreshR();
                }
            }, function () { });
        }

        $scope.updateEntry = function (_id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/repairs/repair.modal.html',
                size: 'md',
                controller: 'repairModalCtrl',
                resolve: {
                    r_id: function(){
                        return _id;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refreshR();
                }
            }, function () { });
        }

        $scope.newPart = function (repair_id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/parts/part.modal.html',
                size: 'md',
                controller: 'partsController',
                resolve: {
                    part_id: function(){
                        return null;
                    },
                    repair_id: function(){
                        return repair_id;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refreshR();
                }
            }, function () { });
        }

        $scope.updatePart = function (_idpart) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/parts/part.modal.html',
                size: 'md',
                controller: 'partsController',
                resolve: {
                    part_id: function(){
                        return _idpart;
                    },
                    repair_id: function(){
                        return null;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refreshR();
                }
            }, function () { });
        }

        $scope.deleteDataR = function(row){
            $scope.modal = {
                title:'repairs',
                message:'Delete this Data?'
            };
            ngDialog.openConfirm({
                templateUrl: './modules/dialogs/custom.dialog.html',
                scope: $scope,
                className: 'ngdialog-theme-default'
            }).then(function(){
                repairsFactory.deleteRepair(row._idrepair).then(function(data){
                    if(data.statusCode == 200 && data.response.success){
                        toastr.success(data.response.msg, 'SUCCESS');
                        $scope.refreshR();
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            });
        }

        $scope.deleteDataP = function(row){
            $scope.modal = {
                title:'repairs',
                message:'Delete this Data?'
            };
            ngDialog.openConfirm({
                templateUrl: './modules/dialogs/custom.dialog.html',
                scope: $scope,
                className: 'ngdialog-theme-default'
            }).then(function(){
                partsFactory.deletePart(row._idpart).then(function(data){
                    if(data.statusCode == 200 && data.response.success){
                        toastr.success(data.response.msg, 'SUCCESS');
                        $scope.refreshR();
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('repairModalCtrl', repairModalCtrl);

    repairModalCtrl.$inject = ['$scope', 'repairsFactory', 'vehiclesFactory', '$uibModalInstance', 'toastr', '$timeout', '$filter','r_id','$state'];

    function repairModalCtrl($scope, repairsFactory, vehiclesFactory, $uibModalInstance, toastr, $timeout, $filter, r_id, $state) {
        $scope.repair = {};
        $scope.vehicles = {};

        if (!_.isEmpty(r_id)) {
            repairsFactory.getRepair(r_id).then(function (data) {
                if (data.statusCode == 200 && data.response.success) {
                    var repair = data.response.result;
                    if (repair) {
                        $scope.repair = repair;
                        //console.log(new Date($scope.repair.datepurchased));
                        $scope.repair.date = new Date($scope.repair.date);
                    }
                } else {
                    toastr.error(data.response.msg, 'ERROR');
                    return;
                }
            });
        }

        vehiclesFactory.getAllVehicles().then(function (data){
            if (data.statusCode == 200 && data.response.success) {
                var vehicles = data.response.result;
                if (vehicles) {
                    $scope.vehicles = vehicles;
                }
            } else {
                toastr.error(data.response.msg, 'ERROR');
                return;
            }
        });

        $scope.date = {
            datepickerOptions: {
                showWeeks: false,
                startingDay: 1,
                dateDisabled: function(data) {
                    return (data.mode === 'day' && (new Date().toDateString() == data.date.toDateString()));
                }
            }
        }
        $scope.isOpen = false;
        $scope.openCalendar = function(e) {
            e.preventDefault();
            e.stopPropagation();
            $scope.isOpen = true;
        };

        $scope.saveEntry = function () {
            if (_.isEmpty(r_id)) {
                $scope.repair.date = $filter('date')($scope.repair.date, "yyyy-MM-dd");
                //console.log($scope.repair);
                repairsFactory.saveRepair($scope.repair).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        //console.log(data.response);
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            } else {
                $scope.repair.date = $filter('date')($scope.repair.date, "yyyy-MM-dd");
                repairsFactory.updateRepair(r_id, $scope.repair).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            }
        }

        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .factory('repairsFactory', repairsFactory);

        repairsFactory.$inject = ['Restangular'];

        function repairsFactory(Restangular){
            return {
                getAllRepairs: function(){
                    return Restangular.all('repairs').customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getAllRepairParts: function(){
                    return Restangular.all('repairparts').customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                saveRepair: function(data){
                    return Restangular.all('repairs').customPOST(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                deleteRepair: function(id){
                    return Restangular.all('repairs/' + id).customDELETE().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                updateRepair: function(id,data){
                    return Restangular.all('repairs/' + id).customPUT(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getRepair: function(id){
                    return Restangular.all('repairs/' + id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getRepairsByVehicle: function(v_id){
                    return Restangular.all('repairs/vehicle/' + v_id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                }
            }
        }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('partsController', partsController);

        partsController.$inject = ['$scope', '$state', 'partsFactory', '$filter', '$timeout', '$uibModalInstance','ngDialog','toastr','part_id', 'repair_id'];

    function partsController($scope, $state, partsFactory, $filter, $timeout, $uibModalInstance, ngDialog, toastr, part_id, repair_id) {
        $scope.parts = {};
        $scope.parts.repair_id = repair_id;
        if (!_.isEmpty(part_id)) {
            partsFactory.getPart(part_id).then(function (data) {
                if (data.statusCode == 200 && data.response.success) {
                    var parts = data.response.result;
                    if (!_.isEmpty(parts)) {
                        $scope.parts = parts;
                    }
                }
            });
        }

        $scope.savePart = function () {
            if (_.isEmpty(part_id)) {
                partsFactory.savePart($scope.parts).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        console.log($scope.parts);
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                });
            } else {
                partsFactory.updatePart(part_id, $scope.parts).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                });
            }
        }

        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .factory('partsFactory', partsFactory);

        partsFactory.$inject = ['Restangular'];

        function partsFactory(Restangular){
            return {
                getAllParts: function(){
                    return Restangular.all('parts').customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                savePart: function(data){
                    return Restangular.all('parts').customPOST(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                deletePart: function(id){
                    return Restangular.all('parts/' + id).customDELETE().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                updatePart: function(id,data){
                    return Restangular.all('parts/' + id).customPUT(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getPart: function(id){
                    return Restangular.all('parts/' + id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getPartsByRepair: function(r_id){
                    return Restangular.all('parts/repair/' + r_id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                }
            }
        }
})();
(function(){
    'use strict';

    angular.module('starter')
        .config(loginConfig);

        loginConfig.$inject = ['$stateProvider'];

        function loginConfig($stateProvider){
            $stateProvider
                .state('login', {
                    url: '/login',
                    templateUrl: './modules/login/login.html',
                    controller: 'loginController'
                });
        }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('loginController', loginController);

    loginController.$inject = ['$scope', '$state', 'loginFactory', '$filter', '$uibModal','toastr', '$timeout'];

    function loginController($scope, $state, loginFactory, $filter, $uibModal, toastr, $timeout) {
        
        if(loginFactory.getCurrentUser()){
            $state.go('main.home');
        }
        
        $scope.user = {};
        $scope.login = function(){
            loginFactory.login($scope.user).then(function(data){
                if(data.statusCode == 200 && data.response.success){
                    var result = data.response.result;
                    console.log(result);
                    toastr.success(data.response.msg,'SUCCESS');

                    loginFactory.setUserToken(result.token);
                    loginFactory.setCurrentUser(result.user);

                    $timeout(function(){
                        $state.go('main.home');
                    }, 1000);
                } else if(data.statusCode == 401 && !data.response.success && _.isArray(data.response.result)){
                    console.log(data);
                    _.each(data.response.result, function(row){
                        toastr.warning(row.msg,'WARNING');
                    });
                    return;
                } else {
                    toastr.error(data.response.msg,'ERROR');
                    return;
                }
            });
        }
    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .factory('loginFactory',loginFactory);

        loginFactory.$inject = ['Restangular','$http','localStorageService'];

        function loginFactory(Restangular, $http, localStorageService){
            return {
                login: function(data){
                    var authdata = window.btoa(data.username + ':' + data.password);
                    $http.defaults.headers.common['Authorization'] = 'Basic ' + authdata;
                    return Restangular.all('login').customPOST().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                setUserToken: function(token){
                    localStorageService.set('user.token', token);
                    return true;
                },
                getUserToken: function(){
                    return localStorageService.get('user.token');
                },
                setCurrentUser: function(user){
                    localStorageService.set('user', user);
                    return true;
                },
                getCurrentUser: function(){
                    return localStorageService.get('user');
                },
                logout: function(){
                    return Restangular.all('login').customDELETE().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                }
            }
        }
})();
(function(){
    'use strict';

    angular.module('starter')
        .config(locationsConfig);

        locationsConfig.$inject = ['$stateProvider'];

        function locationsConfig($stateProvider){
            $stateProvider
                .state('main.locations', {
                    url: '/locations',
                    templateUrl: './modules/locations/locations.html',
                    controller: 'locationsController'
                });
        }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('locationsController', locationsController);

    locationsController.$inject = ['$scope', 'locationsFactory', '$filter', '$uibModal','ngDialog','toastr'];

    function locationsController($scope, locationsFactory, $filter, $uibModal, ngDialog, toastr) {
        $scope.locations = [];
        $scope.locationsCopy = [];
        $scope.txtSearch = '';

        locationsFactory.getAllLocation().then(function (data) {
            //console.log("data:" + data);
            if (data.statusCode == 200 && data.response.success) {
                var locations = data.response.result;
                console.dir(locations);
                if (!_.isEmpty(locations)) {
                    $scope.locations = locations;
                    $scope.locationsCopy = angular.copy(locations);
                }
            }
        });

        $scope.search = function () {
            if ($scope.txtSearch) {
                var result = $filter('filter')($scope.locations, $scope.txtSearch);
                if (result) {
                    $scope.locations = result;
                }
            } else {
                $scope.locations = $scope.locationsCopy;
            }
        }

        $scope.refresh = function () {
            locationsFactory.getAllLocation().then(function (data) {
                console.log("data:" + data);
                if (data.statusCode == 200 && data.response.success) {
                    var locations = data.response.result;
                    console.log('locations: ' + locations);
                    if (!_.isEmpty(locations)) {
                        $scope.locations = locations;
                        $scope.locationsCopy = angular.copy(locations);
                    }
                }
            });
        }

        $scope.newEntry = function () {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/locations/location.modal.html',
                size: 'md',
                controller: 'locationModalCtrl',
                resolve: {
                    loc_id: function(){
                        return null;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refresh();
                }
            }, function () { });
        }

        $scope.updateEntry = function (_id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/locations/location.modal.html',
                size: 'md',
                controller: 'locationModalCtrl',
                resolve: {
                    loc_id: function(){
                        return _id;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refresh();
                }
            }, function () { });
        }

        $scope.deleteData = function(row){
            $scope.modal = {
                title:'users',
                message:'Delete this Data?'
            };
            ngDialog.openConfirm({
                templateUrl: './modules/dialogs/custom.dialog.html',
                scope: $scope,
                className: 'ngdialog-theme-default'
            }).then(function(){
                locationsFactory.deleteLocation(row._id).then(function(data){
                    if(data.statusCode == 200 && data.response.success){
                        toastr.success(data.response.msg, 'SUCCESS');
                        $scope.refresh();
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('locationModalCtrl', locationModalCtrl);

    locationModalCtrl.$inject = ['$scope', 'locationsFactory', '$uibModalInstance', 'toastr', '$timeout', '$filter','loc_id','$state'];

    function locationModalCtrl($scope, locationsFactory, $uibModalInstance, toastr, $timeout, $filter, loc_id, $state) {
        $scope.location = {};

        if (!_.isEmpty(loc_id)) {
            locationsFactory.getLocation(loc_id).then(function (data) {
                if (data.statusCode == 200 && data.response.success) {
                    var location = data.response.result;
                    if (location) {
                        $scope.location = location;
                    }
                } else {
                    toastr.error(data.response.msg, 'ERROR');
                    return;
                }
            });
        }

        $scope.saveEntry = function () {
            if (_.isEmpty(loc_id)) {
                locationsFactory.saveLocation($scope.location).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        //console.log(data.response);
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            } else {
                locationsFactory.updateLocation(loc_id, $scope.location).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            }
        }

        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .factory('locationsFactory',locationsFactory);

        locationsFactory.$inject = ['Restangular'];

        function locationsFactory(Restangular){
            return {
                getAllLocation: function(){
                    return Restangular.all('locations').customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                saveLocation: function(data){
                    return Restangular.all('locations').customPOST(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                deleteLocation: function(loc_id){
                    return Restangular.all('locations/' + loc_id).customDELETE().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                updateLocation: function(loc_id,data){
                    return Restangular.all('locations/' + loc_id).customPUT(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getLocation: function(loc_id){
                    return Restangular.all('locations/' + loc_id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                }
            }
        }
})();
(function(){
    'use strict';

    angular.module('starter')
        .config(makesConfig);

        makesConfig.$inject = ['$stateProvider'];

        function makesConfig($stateProvider){
            $stateProvider
                .state('main.makes', {
                    url: '/makes',
                    templateUrl: './modules/makes/makes.html',
                    controller: 'makesController'
                });
        }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('makesController', makesController);

    makesController.$inject = ['$scope', 'makesFactory', '$filter', '$uibModal','ngDialog','toastr'];

    function makesController($scope, makesFactory, $filter, $uibModal, ngDialog, toastr) {
        $scope.makes = [];
        $scope.makesCopy = [];
        $scope.txtSearch = '';

        makesFactory.getAllMake().then(function (data) {
            //console.log("data:" + data);
            if (data.statusCode == 200 && data.response.success) {
                var makes = data.response.result;
                console.dir(makes);
                if (!_.isEmpty(makes)) {
                    $scope.makes = makes;
                    $scope.makesCopy = angular.copy(makes);
                }
            }
        });

        $scope.search = function () {
            if ($scope.txtSearch) {
                var result = $filter('filter')($scope.makes, $scope.txtSearch);
                if (result) {
                    $scope.makes = result;
                }
            } else {
                $scope.makes = $scope.makesCopy;
            }
        }

        $scope.refresh = function () {
            makesFactory.getAllMake().then(function (data) {
                console.log("data:" + data);
                if (data.statusCode == 200 && data.response.success) {
                    var makes = data.response.result;
                    console.log('makes: ' + makes);
                    if (!_.isEmpty(makes)) {
                        $scope.makes = makes;
                        $scope.makesCopy = angular.copy(makes);
                    }
                }
            });
        }

        $scope.newEntry = function () {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/makes/make.modal.html',
                size: 'sm',
                controller: 'makeModalCtrl',
                resolve: {
                    make_id: function(){
                        return null;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refresh();
                }
            }, function () { });
        }

        $scope.updateEntry = function (_id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/makes/make.modal.html',
                size: 'sm',
                controller: 'makeModalCtrl',
                resolve: {
                    make_id: function(){
                        return _id;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refresh();
                }
            }, function () { });
        }

        $scope.deleteData = function(row){
            $scope.modal = {
                title:'users',
                message:'Delete this Data?'
            };
            ngDialog.openConfirm({
                templateUrl: './modules/dialogs/custom.dialog.html',
                scope: $scope,
                className: 'ngdialog-theme-default'
            }).then(function(){
                makesFactory.deleteMake(row._id).then(function(data){
                    if(data.statusCode == 200 && data.response.success){
                        toastr.success(data.response.msg, 'SUCCESS');
                        $scope.refresh();
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('makeModalCtrl', makeModalCtrl);

    makeModalCtrl.$inject = ['$scope', 'makesFactory', '$uibModalInstance', 'toastr', '$timeout', '$filter','make_id','$state'];

    function makeModalCtrl($scope, makesFactory, $uibModalInstance, toastr, $timeout, $filter, make_id, $state) {
        $scope.make = {};

        if (!_.isEmpty(make_id)) {
            makesFactory.getMake(make_id).then(function (data) {
                if (data.statusCode == 200 && data.response.success) {
                    var make = data.response.result;
                    if (make) {
                        $scope.make = make;
                    }
                } else {
                    toastr.error(data.response.msg, 'ERROR');
                    return;
                }
            });
        }

        $scope.saveEntry = function () {
            if (_.isEmpty(make_id)) {
                makesFactory.saveMake($scope.make).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        //console.log(data.response);
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            } else {
                makesFactory.updateMake(make_id, $scope.make).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            }
        }

        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .factory('makesFactory',makesFactory);

        makesFactory.$inject = ['Restangular'];

        function makesFactory(Restangular){
            return {
                getAllMake: function(){
                    return Restangular.all('makes').customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                saveMake: function(data){
                    return Restangular.all('makes').customPOST(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                deleteMake: function(make_id){
                    return Restangular.all('makes/' + make_id).customDELETE().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                updateMake: function(make_id,data){
                    return Restangular.all('makes/' + make_id).customPUT(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getMake: function(make_id){
                    return Restangular.all('makes/' + make_id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                }
            }
        }
})();
(function(){
    'use strict';

    angular.module('starter')
        .config(vehicleTypesConfig);

        vehicleTypesConfig.$inject = ['$stateProvider'];

        function vehicleTypesConfig($stateProvider){
            $stateProvider
                .state('main.vehicletypes', {
                    url: '/vehicletypes',
                    templateUrl: './modules/vehicletypes/vehicletypes.html',
                    controller: 'vehicleTypesController'
                });
        }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('vehicleTypesController', vehicleTypesController);

    vehicleTypesController.$inject = ['$scope', 'vehicleTypesFactory', '$filter', '$uibModal','ngDialog','toastr'];

    function vehicleTypesController($scope, vehicleTypesFactory, $filter, $uibModal, ngDialog, toastr) {
        $scope.vehicleTypes = [];
        $scope.vehicleTypesCopy = [];
        $scope.txtSearch = '';

        vehicleTypesFactory.getAllVehicleTypes().then(function (data) {
            //console.log("data:" + data);
            if (data.statusCode == 200 && data.response.success) {
                var vehicleTypes = data.response.result;
                console.dir(vehicleTypes);
                if (!_.isEmpty(vehicleTypes)) {
                    $scope.vehicleTypes = vehicleTypes;
                    $scope.vehicleTypesCopy = angular.copy(vehicleTypes);
                }
            }
        });

        $scope.search = function () {
            if ($scope.txtSearch) {
                var result = $filter('filter')($scope.vehicleTypes, $scope.txtSearch);
                if (result) {
                    $scope.vehicleTypes = result;
                }
            } else {
                $scope.vehicleTypes = $scope.vehicleTypesCopy;
            }
        }

        $scope.refresh = function () {
            vehicleTypesFactory.getAllVehicleTypes().then(function (data) {
                console.log("data:" + data);
                if (data.statusCode == 200 && data.response.success) {
                    var vehicleTypes = data.response.result;
                    console.log('locations: ' + vehicleTypes);
                    if (!_.isEmpty(vehicleTypes)) {
                        $scope.vehicleTypes = vehicleTypes;
                        $scope.vehicleTypesCopy = angular.copy(vehicleTypes);
                    }
                }
            });
        }

        $scope.newEntry = function () {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/vehicletypes/vehicletype.modal.html',
                size: 'md',
                controller: 'vehicleTypeModalCtrl',
                resolve: {
                    vtype_id: function(){
                        return null;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refresh();
                }
            }, function () { });
        }

        $scope.updateEntry = function (_id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: './modules/vehicletypes/vehicletype.modal.html',
                size: 'md',
                controller: 'vehicleTypeModalCtrl',
                resolve: {
                    vtype_id: function(){
                        return _id;
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) { 
                if(selectedItem == 'save'){
                    $scope.refresh();
                }
            }, function () { });
        }

        $scope.deleteData = function(row){
            $scope.modal = {
                title:'users',
                message:'Delete this Data?'
            };
            ngDialog.openConfirm({
                templateUrl: './modules/dialogs/custom.dialog.html',
                scope: $scope,
                className: 'ngdialog-theme-default'
            }).then(function(){
                vehicleTypesFactory.deleteLocation(row._id).then(function(data){
                    if(data.statusCode == 200 && data.response.success){
                        toastr.success(data.response.msg, 'SUCCESS');
                        $scope.refresh();
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('starter')
        .controller('vehicleTypeModalCtrl', vehicleTypeModalCtrl);

    vehicleTypeModalCtrl.$inject = ['$scope', 'vehicleTypesFactory', '$uibModalInstance', 'toastr', '$timeout', '$filter','vtype_id','$state'];

    function vehicleTypeModalCtrl($scope, vehicleTypesFactory, $uibModalInstance, toastr, $timeout, $filter, vtype_id, $state) {
        $scope.vehicleType = {};

        if (!_.isEmpty(vtype_id)) {
            vehicleTypesFactory.getVehicleType(vtype_id).then(function (data) {
                if (data.statusCode == 200 && data.response.success) {
                    var vehicleType = data.response.result;
                    if (vehicleType) {
                        $scope.vehicleType = vehicleType;
                    }
                } else {
                    toastr.error(data.response.msg, 'ERROR');
                    return;
                }
            });
        }

        $scope.saveEntry = function () {
            if (_.isEmpty(vtype_id)) {
                vehicleTypesFactory.saveVehicleType($scope.vehicleType).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        //console.log(data.response);
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            } else {
                vehicleTypesFactory.updateVehicleType(vtype_id, $scope.vehicleType).then(function (data) {
                    if (data.statusCode == 200 && data.response.success) {
                        toastr.success(data.response.msg, 'SUCCESS');
                        $timeout(function(){
                            $uibModalInstance.close('save');
                        },1000);
                    } else if (!data.success && _.isArray(data.result)) {
                        _.each(data.result, function (row) {
                            toastr.warning(row.msg, 'WARNING');
                        });
                        return;
                    } else {
                        toastr.error(data.response.msg, 'ERROR');
                        return;
                    }
                })
            }
        }

        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        }
    }
})();
(function(){
    'use strict';

    angular.module('starter')
        .factory('vehicleTypesFactory',vehicleTypesFactory);

        vehicleTypesFactory.$inject = ['Restangular'];

        function vehicleTypesFactory(Restangular){
            return {
                getAllVehicleTypes: function(){
                    return Restangular.all('vehicletypes').customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                saveVehicleType: function(data){
                    return Restangular.all('vehicletypes').customPOST(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                deleteVehicleType: function(vtype_id){
                    return Restangular.all('vehicletypes/' + vtype_id).customDELETE().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                updateVehicleType: function(vtype_id,data){
                    return Restangular.all('vehicletypes/' + vtype_id).customPUT(data).then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                },
                getVehicleType: function(vtype_id){
                    return Restangular.all('vehicletypes/' + vtype_id).customGET().then(function(res){
                        return res;
                    }, function(err){
                        return err.data;
                    });
                }
            }
        }
})();